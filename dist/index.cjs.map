{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["import { ReturnFetchJsonDefaultOptions } from '../packages/return-fetch-json/src/index';\n/**\n * A simple and powerful high order function to extend fetch.\n *\n * @packageDocumentation\n */\n\n/**\n * Arguments of fetch function.\n *\n * @throws {Error} if a first argument of fetch is `Request` object. only string and URL are supported.\n * @see {fetch, RequestInfo, Request}\n *\n * @public\n */\nexport type FetchArgs = [string | URL, RequestInit | undefined];\n\n/**\n * Type of `returnFetch` function.\n * It is useful for whom want to write customized returnFetch function.\n *\n * @public\n */\nexport type ReturnFetch = typeof returnFetch;\n\n/**\n * Options of `returnFetch` function.\n *\n * @public\n */\nexport type ReturnFetchDefaultOptions = {\n  /**\n   * `fetch` function to be used in `returnFetch` function.\n   * If not provided, `fetch` function in global scope will be used.\n   * Any fetch implementation can be used, such as `node-fetch`, `cross-fetch`, `isomorphic-fetch`, etc.\n   *\n   * a `fetch` function created by `returnFetch` also can be used here.\n   *\n   * @public\n   */\n  fetch?: ReturnType<ReturnFetch>;\n  /**\n   * Base URL of fetch. It will be used when the first argument of fetch is relative URL.\n   *\n   * @public\n   */\n  baseUrl?: string | URL;\n  /**\n   * Default headers of fetch. It will be used when the second argument of fetch does not have `headers` property.\n   * If it is provided and `headers` also provided when calling a `fetch`, headers will be merged.\n   * Priority of headers is `requestInit.headers` > `defaultOptions.headers`. Duplicated headers will be overwritten.\n   *\n   * @public\n   */\n  headers?: HeadersInit;\n  interceptors?: {\n    /**\n     * Request interceptor. It will be called before request.\n     *\n     * @param requestArgs Arguments of fetch function.\n     * @param fetch the `fetch` you provided at {@link ReturnFetchDefaultOptions['fetch']}\n     *\n     * @public\n     */\n    request?: (\n      requestArgs: FetchArgs,\n    ) => Promise<FetchArgs>;\n    /**\n     * Response interceptor. It will be called after response.\n     *\n     * @param response Response object received from fetch function.\n     * @param requestArgs Arguments of fetch function.\n     * @param fetch the `fetch` you provided at {@link ReturnFetchDefaultOptions['fetch']}\n     *\n     * @public\n     */\n    response?: (\n      response: Response,\n      requestArgs: FetchArgs,\n    ) => Promise<Response>;\n  };\n};\n\nconst applyDefaultOptions = (\n  [input, requestInit]: FetchArgs,\n  defaultOptions?: ReturnFetchDefaultOptions,\n): FetchArgs => {\n  const headers = new Headers(defaultOptions?.headers);\n  new Headers(requestInit?.headers).forEach((value, key) => {\n    headers.set(key, value);\n  });\n\n  let inputToReturn: FetchArgs[0] = input;\n  if (defaultOptions?.baseUrl) {\n    inputToReturn = new URL(input, defaultOptions.baseUrl);\n  }\n\n  return [\n    inputToReturn,\n    {\n      ...requestInit,\n      headers,\n    },\n  ];\n};\n\n// To handle Request object we need to read body as ArrayBuffer.\n// If you have a better way, please let me know.\nconst mergeRequestObjectWithRequestInit = (\n  request: Request,\n  requestInit?: RequestInit,\n): Promise<RequestInit> => {\n  const mergedRequest = new Request(request, requestInit);\n  return new Response(mergedRequest.body).arrayBuffer().then((body) => ({\n    method: mergedRequest.method,\n    headers: mergedRequest.headers,\n    body: body,\n    referrer: mergedRequest.referrer,\n    referrerPolicy: mergedRequest.referrerPolicy,\n    mode: mergedRequest.mode,\n    credentials: mergedRequest.credentials,\n    cache: mergedRequest.cache,\n    redirect: mergedRequest.redirect,\n    integrity: mergedRequest.integrity,\n    keepalive: mergedRequest.keepalive,\n    signal: mergedRequest.signal,\n    window: requestInit?.window,\n  }));\n};\n\nconst normalizeArgs = async (\n  ...args: Parameters<typeof fetch>\n): Promise<FetchArgs> => {\n  let input: string | URL;\n  let requestInit: RequestInit | undefined;\n  if (args[0] instanceof Request) {\n    input = args[0].url;\n    requestInit = await mergeRequestObjectWithRequestInit(args[0], args[1]);\n  } else {\n    input = args[0];\n    requestInit = args[1];\n  }\n\n  return [input, requestInit];\n};\n\nconst returnFetch =\n  (defaultOptions?: ReturnFetchDefaultOptions) =>{\n    let newDefaultOptions = {...defaultOptions}\n    return {\n      setDefaultHeaders: (headers: HeadersInit | undefined)=>{\n        newDefaultOptions.headers = headers;\n      },\n      invoke: async (...args: Parameters<typeof fetch>): Promise<Response> => {\n        const defaultOptionAppliedArgs = applyDefaultOptions(\n          await normalizeArgs(...args),\n          defaultOptions,\n        );\n    \n        // apply request interceptor\n        const fetchProvided = defaultOptions?.fetch?.invoke || fetch;\n        let requestInterceptorAppliedArgs: FetchArgs;\n        if (defaultOptions?.interceptors?.request) {\n          requestInterceptorAppliedArgs =\n            await defaultOptions?.interceptors?.request?.(\n              defaultOptionAppliedArgs,\n            );\n        } else {\n          requestInterceptorAppliedArgs = defaultOptionAppliedArgs;\n        }\n    \n        // ajax call\n        const response = await fetchProvided(...requestInterceptorAppliedArgs);\n    \n        // apply response interceptor\n        return (\n          defaultOptions?.interceptors?.response?.(\n            response,\n            requestInterceptorAppliedArgs,\n          ) || response\n        );\n      }\n    }\n  }\n\nexport default returnFetch;\n"],"names":["normalizeArgs","args","input","requestInit","_temp2","slice","call","arguments","_temp","Request","url","Promise","resolve","request","mergedRequest","Response","body","arrayBuffer","then","method","headers","referrer","referrerPolicy","mode","credentials","cache","redirect","integrity","keepalive","signal","window","mergeRequestObjectWithRequestInit","_mergeRequestObjectWi","e","reject","defaultOptions","newDefaultOptions","_extends","setDefaultHeaders","invoke","apply","_normalizeArgs","_defaultOptions$fetch","_temp4","fetchProvided","requestInterceptorAppliedArgs","response","_defaultOptions$inter2","interceptors","defaultOptionAppliedArgs","_ref","Headers","forEach","value","key","set","inputToReturn","baseUrl","URL","applyDefaultOptions","fetch","_temp3","_defaultOptions$inter3","_defaultOptions$inter4","_defaultOptions$inter"],"mappings":"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"}